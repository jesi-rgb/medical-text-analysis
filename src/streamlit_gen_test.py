import streamlit as st
import matplotlib.pyplot as plt

from utils import *

from utils import _get_state


######################################## INITIAL CONFIG ##########################################

# configuration of the page
st.set_page_config(
    page_title="MEDTEXT NLP",
    page_icon="üí≠",
    layout="wide",
    initial_sidebar_state="auto",
)


# configuration for the matplots
size = 15
params = {
    "legend.fontsize": "large",
    "figure.figsize": (20, 10),
    "axes.labelsize": 25,
    "axes.titlesize": 25,
    "xtick.labelsize": 10,
    "ytick.labelsize": 10,
    "axes.titlepad": 25,
}
plt.rcParams["font.sans-serif"] = ["Avenir", "sans-serif"]
plt.rcParams.update(params)


st.title("**MEDTEXT**: An√°lisis de texto m√©dico")
st.subheader(
    "MEDTEXT tiene como objetivo extraer y mostrar informaci√≥n √∫til encontrada en los comentarios m√©dicos."
)

col1, col2 = st.beta_columns((1, 3))


######################################## PAGE DEFINITION ##########################################


def sidebar():
    st.sidebar.header("M√°s info...")

    st.sidebar.subheader("Generaci√≥n de comentarios")
    st.sidebar.markdown(
        justify_text(
            "En la columna de la <b>izquierda</b> podemos generar comentarios <i>de mentira</i>, debido a la carencia de bases de datos p√∫blicas que hay."
        ),
        unsafe_allow_html=True,
    )
    st.sidebar.markdown(
        justify_text(
            "La generaci√≥n de comentarios se hace mediante una red neuronal especializada en modelado del lenguaje: <b>GPT-2</b>. La red ha sido entrenada en un corpus de cerca de 30.000 comentarios m√©dicos encontrados p√∫blicamente."
        ),
        unsafe_allow_html=True,
    )
    st.sidebar.markdown(
        justify_text(
            "La idea es poder tener un generador de texto <i>idealmente infinito</i>, para que los desarrolladores de herramientas de an√°lisis de texto m√©dico puedan desarrollar mejores aplicaciones de forma m√°s f√°cil."
        ),
        unsafe_allow_html=True,
    )

    st.sidebar.markdown("---")

    st.sidebar.subheader("Evaluaci√≥n de comentarios")
    st.sidebar.markdown(
        justify_text(
            "En la de la <b>derecha</b>, podemos analizar los comentarios generados, o aquellos de los que dispongamos nosotros."
        ),
        unsafe_allow_html=True,
    )
    st.sidebar.markdown(
        justify_text(
            "El an√°lisis se lleva a cabo mediante el uso de herramientas de PLN especializadas en texto m√©dico. Dichos modelos han sido entrenados para ser particularmente buenos con texto m√©dico, aunque cada modelo est√° especializado en cosas diferentes."
        ),
        unsafe_allow_html=True,
    )
    st.sidebar.markdown(
        justify_text(
            "Parte de la idea del proyecto comprend√≠a unificar todas estas herramientas en una, de forma que podamos disfrutar de los puntos fuertes de todas."
        ),
        unsafe_allow_html=True,
    )

    st.sidebar.markdown("---")

    st.sidebar.header("Autores:")
    st.sidebar.markdown("- **Jes√∫s Enrique Rasc√≥n**")
    st.sidebar.markdown("- **Roc√≠o Romero Zaliz**")


# GENERATION COLUMN
def comment_generation(state):
    st.header("GENERAR COMENTARIOS")
    n_comments = st.number_input("N¬∫ de comentarios a generar", 1, 5, 2, 1)

    if st.button("Generar comentarios"):

        with st.spinner("Cargando el modelo en memoria"):

            model, tokenizer = load_model()

        st.success("Modelo cargado!")

        coms = st.empty()
        coms.write("Generando comentarios... puede tomar un rato")
        progress = st.progress(0)
        progress_text = st.empty()

        generated_comments = GeneratedComment(
            generate(
                model.to("cpu"),
                tokenizer,
                "<|BOS|>",
                entry_count=n_comments,
                progress_bar=progress,
                progress_text=progress_text,
            )
        )

        progress.empty()
        progress_text.empty()
        coms.empty()

        generated_comments = [
            l.removeprefix("<|BOS|>").rstrip("<|EOS|>\n") for l in generated_comments
        ]

        state.generated_comments = generated_comments

    if state.generated_comments is not None:
        st.markdown("---")
        for c in state.generated_comments:
            st.markdown(justify_text(c), unsafe_allow_html=True)
            st.markdown("---")

        if st.button("Borrar comentarios"):
            state.clear()


# EVALUATION COLUMN
def comment_evaluation(state):
    st.header("EVALUAR COMENTARIOS")

    selection = st.selectbox(
        "Elige el modelo a utilizar:",
        ["en_core_med7_trf", "en_ner_bionlp13cg_md", "en_ner_bc5cdr_md"],
        1,
    )

    with st.spinner(f"Cargando **{selection}**..."):
        ner_tagger = load_ner_tagger(selection)

    # configure the entities parser colours
    col_dict = {}
    seven_colours = [
        "#e6194B",
        "#3cb44b",
        "#ffe119",
        "#ffd8b1",
        "#f58231",
        "#f032e6",
        "#42d4f4",
        "#ff0000",
        "#ff8700",
        "#ffd300",
        "#deff0a",
        "#a1ff0a",
        "#0aff99",
        "#0aefff",
        "#147df5",
        "#580aff",
        "#be0aff",
    ]

    for label, colour in zip(ner_tagger.pipe_labels["ner"], seven_colours):
        col_dict[label] = colour

    html_format_options = {"ents": ner_tagger.pipe_labels["ner"], "colors": col_dict}

    source_comment_choice = st.radio(
        "Elige de d√≥nde cargar los comentarios",
        ["Generados", "Desde archivo", "Escribir"],
        index=0,
    )

    texts = None
    if source_comment_choice == "Generados":
        if state.generated_comments is not None:
            texts = state.generated_comments
        else:
            st.warning("Debes generar comentarios primero!")

    elif source_comment_choice == "Desde archivo":
        st.warning(
            "Sube un archivo de texto con tus comentarios aqu√≠. Debe ser un .txt o .dat. Se espera que haya un comentario por l√≠nea."
        )
        uploaded_file = st.file_uploader("", type=["txt", "dat"])
        if uploaded_file is not None:
            stringio = StringIO(uploaded_file.getvalue().decode("utf-8"))
            texts = stringio.readlines()

    elif source_comment_choice == "Escribir":
        st.subheader(
            "Puedes escribir tus comentarios aqu√≠. Escribe un solo comentario por l√≠nea."
        )
        texts = st.text_area("Escribe aqu√≠ tus comentarios.", height=200).split("\n")

    if texts is None:
        pass

    else:

        if len(texts) == 1:
            state.text_idx = 0

        else:
            state.text_idx = st.selectbox(
                "Elige el comentario a analizar", options=list(range(len(texts)))
            )

        state.text = load_comment(texts[state.text_idx])

        doc = ner_tagger(state.text)

        styled_html = spacy.displacy.render(
            doc, style="ent", options=html_format_options
        )

        styled_html = check_colors_html(styled_html)

        st.markdown(styled_html, unsafe_allow_html=True)

        st.markdown("---")

        display_analysis(state.text, doc, col_dict)


def main():
    state = _get_state()
    pages = {
        "Generation": comment_generation,
        "Evaluation": comment_evaluation,
    }

    sidebar()
    # Display the selected page with the session state
    with col1:
        pages["Generation"](state)

    with col2:
        pages["Evaluation"](state)

    # Mandatory to avoid rollbacks with widgets, must be called at the end of your app
    state.sync()


if __name__ == "__main__":
    main()
